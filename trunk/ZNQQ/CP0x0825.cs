using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Runtime.InteropServices;

namespace ZNQQ
{

    [StructLayout(LayoutKind.Explicit)]
    public struct S0x0825//发包结构
    {
        [FieldOffset(0)]//标志
        public byte sign;
        [FieldOffset(1)]//版本
        public ushort ver;
        [FieldOffset(3)]//指令
        public ushort cmd;
        [FieldOffset(5)]//序号
        public ushort seq;
        [FieldOffset(7)]//QQ号
        public uint qq;
        [FieldOffset(11)]//未知
        public byte unknown;
        [FieldOffset(26)]//密钥0x0825
        public byte key;
        [FieldOffset(42)]//数据
        public ushort data;
        [FieldOffset(114)]//结束标志0x03
        public uint end;
    }

    [StructLayout(LayoutKind.Explicit)]
    public struct R0x0825//收包结构
    {
        [FieldOffset(0)]//标志
        public byte sign;
        [FieldOffset(1)]//版本
        public ushort ver;
        [FieldOffset(3)]//指令
        public ushort cmd;
        [FieldOffset(5)]//序号
        public ushort seq;
        [FieldOffset(7)]//QQ号
        public uint qq;
        [FieldOffset(11)]//未知
        public byte unknown;
        [FieldOffset(14)]//数据
        public ushort data;
        [FieldOffset(134)]//结束标志0x03
        public uint end;
    }

    unsafe public class CP0x0825_SENDER
    {
        public static byte[] send_bytes = { 
                                              0x02,
                                              0x30, 0x13, 
                                              0x08, 0x25, 
                                              0x48, 0x4F, 
                                              0x69, 0xC7, 0x56, 0xE8,//QQ
                                              0x03, 0x00 , 0x00, 0x00, 0x01,0x01, 0x01, 0x00, 0x00, 0x65, 0xCA, 0x00, 0x00, 0x00, 0x00, //未知固定
                                              0xB0, 0x19, 0xA3, 0x67, 0xE4, 0x45, 0x07, 0xC0, 0x8D, 0x6F, 0x5B, 0x8B, 0x0F, 0x7A, 0xC5, 0xED, //密钥
                                              0xF6, 0x74, 0xB3, 0xFC, 0x94, 0x12, 0xA7, 0x87, 0x80, 0x7C, 0xB7, 0x6F, 0x94, 0x29, 0xE0, 0x84, 0x4A, 0xDF, 0xFC, 0x1F, 0x8A, 0x42, 0x8E, 0x0A, 0x38, 0x90, 0x30, 0xE9, 0xE0, 0xF9, 0x49, 0x82, 0x3F, 0xFB, 0x85, 0x3C, 0x16, 0xB8, 0xD0, 0x6C, 0x19, 0xF9, 0x54, 0x68, 0x87, 0xB8, 0xB6, 0x8C, 0x77, 0xE2, 0x33, 0xE7, 0xA0, 0x77, 0xC5, 0xFF, 0xE5, 0x91, 0x23, 0x72, 0x4F, 0xCC, 0xAB, 0x8B, 0x19, 0xEA, 0xF8, 0xEB, 0x19, 0xC1, 0x2E, 0xE5,
                                              0x03
                                          };
        public void test()
        {
            fixed (byte* buf = send_bytes)
            {
                S0x0825* head = (S0x0825*)buf;
                uint qq1 = head->qq;
                uint qq2 = BitConverter.ToUInt32(CP0x0825_SENDER.ReverseBytes(BitConverter.GetBytes(head->qq)), 0);
            }
        }

        private static byte[] ReverseBytes(byte[] inArray)
        {
            byte temp;
            int highCtr = inArray.Length - 1;

            for (int ctr = 0; ctr < inArray.Length / 2; ctr++)
            {
                temp = inArray[ctr];
                inArray[ctr] = inArray[highCtr];
                inArray[highCtr] = temp;
                highCtr -= 1;
            }
            return inArray;
        }
    }

    public class CP0x0825_RECVER
    {
        byte[] recv_bytes = { 0x02, 0x2F, 0x59, 0x08, 0x25, 0x05, 0xF8, 0x07, 0x43, 0x53, 0xA3, 0x00, 0x00, 0x00, 0x2A, 0x8F, 0x4C, 0xB1, 0x07, 0x64, 0xD9, 0x6D, 0x50, 0x75, 0x72, 0x9C, 0x1C, 0xED, 0x1B, 0x9C, 0x57, 0x25, 0x61, 0x3F, 0x70, 0xD3, 0x39, 0x7F, 0xCB, 0x54, 0xDF, 0xD6, 0x0F, 0xCF, 0xEC, 0x53, 0x55, 0x9D, 0xCA, 0x53, 0x6F, 0x92, 0x34, 0x9C, 0x53, 0x75, 0x33, 0x19, 0x88, 0x76, 0x38, 0xFD, 0x10, 0xCB, 0xB1, 0x07, 0xB3, 0x1D, 0xAC, 0x81, 0xB6, 0x5C, 0x55, 0xE4, 0xCB, 0xC5, 0x7D, 0xEB, 0x5B, 0x56, 0x95, 0x1A, 0x8B, 0x47, 0x6A, 0x3D, 0x43, 0xF9, 0x86, 0x2A, 0xA9, 0x3E, 0x60, 0xE2, 0x3D, 0x96, 0x0E, 0x7D, 0xA0, 0x29, 0xC5, 0x7E, 0x53, 0xC7, 0xB4, 0x57, 0xBE, 0x01, 0x91, 0xAB, 0x03 };
    }


    public class CP0x0825
    {

        public void GG()
        {
            CP0x0825_SENDER sender = new CP0x0825_SENDER();
            sender.test();
        }

    }
}
